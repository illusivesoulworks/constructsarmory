buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'io.freefair.gradle:lombok-plugin:6.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'io.freefair.lombok'

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_id}-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "2022.09.04-1.18.2"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                constructsarmory {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                constructsarmory {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'constructsarmory', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'tconstruct'

            mods {
                constructsarmory {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_forge}"

    implementation fg.deobf("slimeknights.mantle:Mantle:${version_mantle}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${version_tic}")

    runtimeOnly fg.deobf("mezz.jei:jei-${version_minecraft}:${version_jei}")
}

sourceSets {
    main {
        resources {
            srcDirs 'src/generated/resources'
            exclude '.cache'
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "${mod_name}",
                    "Specification-Vendor"    : "${mod_author}",
                    "Specification-Version"   : "${getArchiveVersion()}",
                    "Implementation-Title"    : "${mod_name}",
                    "Implementation-Version"  : "${getArchiveVersion()}",
                    "Implementation-Vendor"   : "${mod_author}",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

tasks.build.dependsOn sourcesJar

processResources {
    from("CHANGELOG.md")
    from("COPYING")
    from("COPYING.LESSER")
    from("LICENSE")
    from("README.md")

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version, 'mod_id': mod_id, 'mod_name': mod_name, 'mod_url': mod_url, 'mod_author': mod_author, 'mod_description': mod_description, 'mod_icon': mod_icon
    }
    duplicatesStrategy = DuplicatesStrategy.WARN

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
        exclude '.cache/**'
    }
}


curseforge {

    project {
        apiKey = findProperty('curseKey') ?: 0
        id = "${cf_id}"
        releaseType = "${cf_release}"
        changelogType = 'markdown'
        changelog = file('CHANGELOG_LATEST.md')
        addArtifact(sourcesJar)
        "${cf_versions}".split(',').each {
            addGameVersion "${it}"
        }
        relations {
            requiredDependency 'tinkers-construct'
            requiredDependency 'mantle'
        }
    }
}
